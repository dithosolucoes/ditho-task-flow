
import { useState, useEffect } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { supabase } from "@/integrations/supabase/client";
import { Task, supabaseTaskToTask, taskToSupabaseTask } from "@/types/task";
import { useToast } from "./use-toast";

export function useTasks() {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [loading, setLoading] = useState(true);
  const { user, isAuthenticated } = useAuth();
  const { toast } = useToast();

  useEffect(() => {
    if (isAuthenticated && user) {
      fetchTasks();
    } else {
      setTasks([]);
      setLoading(false);
    }
  }, [isAuthenticated, user]);

  const fetchTasks = async () => {
    if (!user) return;
    
    try {
      setLoading(true);
      
      const { data, error } = await supabase
        .from("tasks")
        .select("*")
        .eq("user_id", user.id)
        .order("created_at", { ascending: false });

      if (error) {
        throw error;
      }

      if (data) {
        const formattedTasks = data.map(supabaseTaskToTask);
        setTasks(formattedTasks);
      }
    } catch (error) {
      console.error("Error fetching tasks:", error);
      toast({
        title: "Erro ao carregar tarefas",
        description: "Não foi possível carregar suas tarefas. Tente novamente mais tarde.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const addTask = async (task: Omit<Task, "id" | "createdAt">) => {
    if (!user) return null;
    
    try {
      const newTask: Task = {
        ...task,
        id: "", // Will be generated by Supabase
        createdAt: new Date(),
      };

      const supabaseTask = taskToSupabaseTask(newTask, user.id);
      
      const { data, error } = await supabase
        .from("tasks")
        .insert(supabaseTask)
        .select()
        .single();

      if (error) {
        throw error;
      }

      if (data) {
        const formattedTask = supabaseTaskToTask(data);
        setTasks(prev => [formattedTask, ...prev]);
        return formattedTask;
      }
      
      return null;
    } catch (error) {
      console.error("Error adding task:", error);
      toast({
        title: "Erro ao adicionar tarefa",
        description: "Não foi possível adicionar a tarefa. Tente novamente mais tarde.",
        variant: "destructive",
      });
      return null;
    }
  };

  const updateTask = async (updatedTask: Task) => {
    if (!user) return false;
    
    try {
      const supabaseTask = taskToSupabaseTask(updatedTask, user.id);
      
      const { error } = await supabase
        .from("tasks")
        .update(supabaseTask)
        .eq("id", updatedTask.id);

      if (error) {
        throw error;
      }

      setTasks(prev => 
        prev.map(task => task.id === updatedTask.id ? updatedTask : task)
      );
      
      return true;
    } catch (error) {
      console.error("Error updating task:", error);
      toast({
        title: "Erro ao atualizar tarefa",
        description: "Não foi possível atualizar a tarefa. Tente novamente mais tarde.",
        variant: "destructive",
      });
      return false;
    }
  };

  const deleteTask = async (id: string) => {
    if (!user) return false;
    
    try {
      const { error } = await supabase
        .from("tasks")
        .delete()
        .eq("id", id)
        .eq("user_id", user.id);

      if (error) {
        throw error;
      }

      setTasks(prev => prev.filter(task => task.id !== id));
      return true;
    } catch (error) {
      console.error("Error deleting task:", error);
      toast({
        title: "Erro ao excluir tarefa",
        description: "Não foi possível excluir a tarefa. Tente novamente mais tarde.",
        variant: "destructive",
      });
      return false;
    }
  };

  return {
    tasks,
    loading,
    fetchTasks,
    addTask,
    updateTask,
    deleteTask
  };
}
